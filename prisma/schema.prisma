// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  RECRUITER
  CANDIDATE
}

// Enum for application status
enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

// Base User model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  recruiter Recruiter?
  candidate Candidate?

  @@map("users")
}

// Recruiter model
model Recruiter {
  id             String   @id @default(uuid())
  userId         String   @unique @map("user_id")
  companyName    String   @map("company_name")
  companyWebsite String?  @map("company_website")
  contactNumber  String   @map("contact_number")

  // Relations
  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs Job[]

  @@index([companyName])
  @@map("recruiters")
}

// Candidate model
model Candidate {
  id       String  @id @default(uuid())
  userId   String  @unique @map("user_id")
  resume   String? // URL or file path to resume
  profile  String? @db.Text // Additional profile information

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("candidates")
}

// Job model
model Job {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  location    String
  salary      String?
  postedAt    DateTime @default(now()) @map("posted_at")
  recruiterId String   @map("recruiter_id")

  // Relations
  recruiter    Recruiter      @relation(fields: [recruiterId], references: [id])
  applications Application[]

  @@index([title])
  @@index([recruiterId])
  @@map("jobs")
}

// Application model
model Application {
  id          String           @id @default(uuid())
  jobId       String          @map("job_id")
  candidateId String          @map("candidate_id")
  appliedAt   DateTime        @default(now()) @map("applied_at")
  status      ApplicationStatus @default(PENDING)

  // Relations
  job       Job       @relation(fields: [jobId], references: [id])
  candidate Candidate @relation(fields: [candidateId], references: [id])

  @@unique([jobId, candidateId]) // Prevent duplicate applications
  @@map("applications")
}